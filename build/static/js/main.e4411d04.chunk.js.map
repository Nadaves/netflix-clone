{"version":3,"sources":["axios.js","Row.js","Banner.js","Navbar.js","requests.js","App.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","base","useState","movies","setMovies","trailerUrl","setUrl","useEffect","a","get","data","results","console","log","fetchData","className","map","item","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","name","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","movie","setMovie","request","rand","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","setShow","window","addEventListener","scrollY","removeEventListener","api","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchAction","fetchDocumnetaries","fetchComedy","fetchRomance","fetchHorror","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4411d04.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row({ title, fetchURL, isLargeRow }) {\r\n  const base = \"https://image.tmdb.org/t/p/original\";\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const data = await axios.get(fetchURL);\r\n      setMovies(data.data.results);\r\n      console.log(data);\r\n    }\r\n    fetchData();\r\n  }, [fetchURL]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (item) => {\r\n    if (trailerUrl) {\r\n      setUrl(\"\");\r\n    } else {\r\n      console.log(item.title);\r\n      movieTrailer(item?.title || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"image-container\">\r\n        {movies.map((item) => (\r\n          <img\r\n            key={item.id}\r\n            onClick={() => handleClick(item)}\r\n            className={`rowPosters ${isLargeRow && \"largeRowPosters\"}`}\r\n            src={\r\n              isLargeRow ? base + item.poster_path : base + item.backdrop_path\r\n            }\r\n            alt={item.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner({ fetchURL }) {\r\n  const [movie, setMovie] = useState([]);\r\n  const base = \"https://image.tmdb.org/t/p/original\";\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchURL);\r\n      const rand = Math.floor(\r\n        Math.random() * (request.data.results.length - 1)\r\n      );\r\n      setMovie(request.data.results[rand]);\r\n    }\r\n    fetchData();\r\n  }, [fetchURL]);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"bannerBackground\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(${base}${movie.backdrop_path})`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"bannerContainer\">\r\n        <h1 className=\"movieTitle\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"bannerButtons\">\r\n          <button className=\"bannerButton\">Play</button>\r\n          <button className=\"bannerButton\">My List</button>\r\n        </div>\r\n        <h1 className=\"movieOverview\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className=\"faderDiv\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setShow(true);\r\n      } else {\r\n        setShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`Navbar ${show && \"Nav-black\"}`}>\r\n      <img\r\n        className=\"netflix-logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1198px-Netflix_2015_logo.svg.png\"\r\n        alt=\"NadavsFlix\"\r\n      />\r\n      <img\r\n        className=\"profile-image \"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"ProfileImage\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","const api = \"ef1ff3445c0565983b2247f4c79fa617\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${api}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${api}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${api}&language=en-US`,\r\n  fetchAction: `/discover/movie?api_key=${api}&with_genres=28`,\r\n  fetchDocumnetaries: `/discover/movie?api_key=${api}&with_genres=99`,\r\n  fetchComedy: `/discover/movie?api_key=${api}&with_genres=35`,\r\n  fetchRomance: `/discover/movie?api_key=${api}&with_genres=10749`,\r\n  fetchHorror: `/discover/movie?api_key=${api}&with_genres=27`,\r\n};\r\n\r\nexport default requests;\r\n","import Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Navbar from \"./Navbar\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Banner fetchURL={requests.fetchTrending} />\n      <Row title=\"Trending Now\" fetchURL={requests.fetchTrending} isLargeRow />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchURL={requests.fetchNetflixOriginals}\n      />\n      <Row title=\"Comedy Films\" fetchURL={requests.fetchComedy} />\n      <Row title=\"Documentaries\" fetchURL={requests.fetchDocumnetaries} />\n      <Row title=\"Romance Movies\" fetchURL={requests.fetchRomance} />\n      <Row title=\"Horror Films\" fetchURL={requests.fetchHorror} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}